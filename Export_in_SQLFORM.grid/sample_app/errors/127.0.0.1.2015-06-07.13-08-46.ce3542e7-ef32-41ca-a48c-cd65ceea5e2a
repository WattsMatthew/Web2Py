(dp1
S'output'
p2
S"<type 'exceptions.NameError'> global name 'current' is not defined"
p3
sS'layer'
p4
S'/home/prasad/Rootpy/web2py_2.9/applications/sample_app/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\nfrom cStringIO import StringIO\n\n\nclass CSVExporter(object):\n    """This class is used when grid\'s table contains reference key id.\n       Exported CSV should contain reference key name of reference\n       key not ids"""\n    file_ext = "csv"\n    content_type = "text/csv"\n\n    def __init__(self, rows):\n        self.rows = rows\n\n    def export(self):\n        db = current.db\n        if self.rows:\n            s = StringIO()\n            csv_writer = csv.writer(s)\n            # obtain column names of current table\n            col = self.rows.colnames\n            # col contains list of column names\n            # e.g: ["employee.id", "employee.name",\n            #       "employee.email", "employee.company"]\n            # get only attribute names i.e id, name, email, company\n            heading = [c.split(\'.\')[-1] for c in col]\n            # Write explicitly the heading in CSV\n            csv_writer.writerow(heading)\n            # don\'t write default colnames\n            self.rows.export_to_csv_file(\n                s, represent=True, write_colnames=False)\n            return s.getvalue()\n        else:\n            return \'\'\n\n\n@auth.requires_login()\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    query = (db.employee.id > 0)\n    # show only CSV and disable other formats.\n    export_classes = dict(csv=(CSVExporter, \'CSV\'), json=False, html=False,\n                          tsv=False, xml=False, csv_with_hidden_cols=False,\n                          tsv_with_hidden_cols=False)\n    grid = SQLFORM.grid(query, showbuttontext=False,\n                        exportclasses=export_classes)\n    return dict(grid=grid)\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/prasad/Rootpy/web2py_2.9/gluon/restricted.py", line 220, in restricted\n    exec ccode in environment\n  File "/home/prasad/Rootpy/web2py_2.9/applications/sample_app/controllers/default.py", line 118, in <module>\n  File "/home/prasad/Rootpy/web2py_2.9/gluon/globals.py", line 385, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/prasad/Rootpy/web2py_2.9/gluon/tools.py", line 3287, in f\n    return action(*a, **b)\n  File "/home/prasad/Rootpy/web2py_2.9/applications/sample_app/controllers/default.py", line 61, in index\n    exportclasses=export_classes)\n  File "/home/prasad/Rootpy/web2py_2.9/gluon/sqlhtml.py", line 2229, in grid\n    raise HTTP(200, oExp.export(), **response.headers)\n  File "/home/prasad/Rootpy/web2py_2.9/applications/sample_app/controllers/default.py", line 25, in export\n    db = current.db\nNameError: global name \'current\' is not defined\n'
p11
s.